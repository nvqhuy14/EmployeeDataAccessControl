--ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY';
SET SERVEROUTPUT ON;


BEGIN
  FOR cur_rec IN (SELECT object_name, object_type
                  FROM user_objects
                  WHERE object_type IN ('TABLE', 'VIEW', 'SEQUENCE', 'SYNONYM'))
  LOOP
    BEGIN
      EXECUTE IMMEDIATE ('DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '" CASCADE CONSTRAINTS');
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Failed: DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"');
    END;
  END LOOP;
END;
/

CREATE TABLE NHANVIEN(
    MANV VARCHAR(10) NOT NULL,
    TENNV NVARCHAR2(100),
    PHAI NUMBER(1) NOT NULL,
    NGAYSINH DATE,
    DIACHI NVARCHAR2(100),
    SDT VARCHAR(10) UNIQUE,
    LUONG VARCHAR2(200),
    PHUCAP VARCHAR2(200),
    VAITRO NVARCHAR2(50),
    MANQL VARCHAR(10),
    PHG VARCHAR(10),
    
    CONSTRAINT PK_NHANVIEN PRIMARY KEY(MANV)
);

CREATE TABLE PHONGBAN (
    MAPB VARCHAR(10) NOT NULL,
    TENPB NVARCHAR2(50),
    TRPHG VARCHAR(10),
    
    CONSTRAINT PK_PHONGBAN PRIMARY KEY(MAPB)
);

CREATE TABLE DEAN (
    MADA VARCHAR(10) NOT NULL,
    TENDA NVARCHAR2(100),
    NGAYBD DATE,
    PHONG VARCHAR(10),
    
    CONSTRAINT PK_DEAN PRIMARY KEY(MADA)
);

CREATE TABLE PHANCONG(
    MADA VARCHAR(10) NOT NULL,
    MANV VARCHAR(10) NOT NULL,
    THOIGIAN DATE,
    
    CONSTRAINT PK_PHANCONG PRIMARY KEY(MADA,MANV)
);

CREATE TABLE user_login_history (
  username VARCHAR2(30) NOT NULL,
  login_count NUMBER,
  CONSTRAINT user_login_history_pk PRIMARY KEY (username)
);
/



/*
    FOREIGN KEYS
*/

ALTER TABLE NHANVIEN
ADD CONSTRAINT FK_NHANVIEN_MANQL FOREIGN KEY (MANQL)
REFERENCES NHANVIEN(MANV);

ALTER TABLE NHANVIEN
ADD CONSTRAINT FK_NHANVIEN_PHG FOREIGN KEY (PHG)
REFERENCES PHONGBAN(MAPB);

ALTER TABLE PHONGBAN
ADD CONSTRAINT FK_PHONGBAN_TRPHG FOREIGN KEY (TRPHG)
REFERENCES NHANVIEN(MANV);

ALTER TABLE DEAN
ADD CONSTRAINT FK_DEAN_PHONG FOREIGN KEY (PHONG)
REFERENCES PHONGBAN(MAPB);

ALTER TABLE PHANCONG
ADD CONSTRAINT FK_PHANCONG_MADA FOREIGN KEY (MADA)
REFERENCES DEAN(MADA);


ALTER TABLE PHANCONG
ADD CONSTRAINT FK_PHANCONG_MANV FOREIGN KEY (MANV)
REFERENCES NHANVIEN(MANV);

/*
    TRIGGERS
*/
CREATE OR REPLACE TRIGGER NHANVIEN_PHAI
BEFORE INSERT OR UPDATE ON NHANVIEN
FOR EACH ROW
BEGIN
    IF :NEW.PHAI NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Value must be 0-MALE or 1-FEMALE');
    END IF;
END;


/
CREATE OR REPLACE TRIGGER NHANVIEN_VAITRO
BEFORE INSERT OR UPDATE ON NHANVIEN
FOR EACH ROW
BEGIN
    IF :NEW.VAITRO NOT IN ('NV','QL','TP','TC','NS','TDA','BGD') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Value must be NV or QL or TP or TC or NS or TDA or BGD');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PHONGBAN_TRPHG
BEFORE INSERT OR UPDATE ON PHONGBAN
FOR EACH ROW
DECLARE
    check_ NUMBER :=0;
BEGIN
    
    SELECT COUNT(*) INTO check_ FROM NHANVIEN WHERE VAITRO = 'TP' AND :NEW.TRPHG = MANV AND PHG = :NEW.MAPB;
    IF check_ <= 0 AND :NEW.TRPHG IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'KHONG PHAI VAI TRO ''TP''');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PHANCONG_THOIGIAN
BEFORE INSERT OR UPDATE ON PHANCONG
FOR EACH ROW
DECLARE
    DEAN_DATE DATE;
BEGIN
    SELECT NGAYBD INTO DEAN_DATE FROM DEAN WHERE MADA = :NEW.MADA;
    IF  DEAN_DATE > :NEW.THOIGIAN THEN
        RAISE_APPLICATION_ERROR(-20001, 'THOI GIAN PHAN CONG PHAI NHO HON HOAC BANG NGAY BAT DAU DE AN');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER user_login_trigger
AFTER INSERT ON COMPANY.NHANVIEN
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count  FROM USER_LOGIN_HISTORY WHERE UPPER(USERNAME) = :NEW.MANV;
    
    IF v_count = 0 THEN
        INSERT INTO USER_LOGIN_HISTORY VALUES(:NEW.MANV,0);
    END IF;
EXCEPTION 
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20002, 'An error occurred: ' || SQLERRM);
END;
/

CREATE OR REPLACE TRIGGER user_login_trigger_
AFTER LOGON ON DATABASE
DECLARE
    v_count NUMBER;
BEGIN
    SELECT login_count INTO v_count  FROM USER_LOGIN_HISTORY WHERE UPPER(USERNAME) = UPPER(SYS_CONTEXT('USERENV','SESSION_USER'));
    
    UPDATE USER_LOGIN_HISTORY
    SET login_count = v_count + 1
    WHERE UPPER(USERNAME) = UPPER(SYS_CONTEXT('USERENV','SESSION_USER'));
    
EXCEPTION 
    WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20002, 'An error occurred: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE grant_role(
    rolename_ IN VARCHAR2,
    vaitro_ IN VARCHAR2
)
AS
    role_temp VARCHAR2(10);
    username_ VARCHAR2(10);
    CURSOR c IS SELECT VAITRO, MANV FROM COMPANY.NHANVIEN;
BEGIN
    DBMS_OUTPUT.ENABLE(NULL);

    FOR r IN c LOOP
        role_temp := r.VAITRO;
        username_ := r.MANV;
        IF UPPER(role_temp) LIKE UPPER(vaitro_) THEN
            DBMS_OUTPUT.PUT_LINE('Granting Role: ' || rolename_ || ' to User: ' || username_);
            EXECUTE IMMEDIATE 'GRANT ' || rolename_ || ' TO ' || username_;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Procedure Execution Complete');
END;
/

COMMIT;


